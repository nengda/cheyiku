<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" implements="mx.controls.listClasses.IDropInListItemRenderer" verticalAlign="middle" paddingLeft="4" horizontalGap="3" horizontalScrollPolicy="off" cacheAsBitmap="true">
	<mx:Script>
		<![CDATA[
			import DTS.Core.GenericEvent;
			import DTS.UI.Colors;
			import DTS.UI.DataGridClasses.FilterPanels.FilterPanelBase;
			import DTS.UI.PopUpCanvas;
			import mx.containers.Canvas;
			import mx.controls.Menu;
			import mx.controls.listClasses.BaseListData;
			import mx.core.Application;
			import mx.effects.Fade;
			import mx.events.EffectEvent;
			import mx.events.MenuEvent;

			[Embed(source="Assets/filter.png")]
			private static const ICO_FILTER:Class;

			private var _listData:BaseListData;
			private var _menuData:Object;
			private var _filterPanel:FilterPanelBase;
			private var _resetShown:Boolean = false;
			private var _justClicked:Boolean = false;
			private var _timer:Timer = null;

			public function get FilterPanel():FilterPanelBase {
				return _filterPanel;
			}

			public function set FilterPanel(value:FilterPanelBase):void {
				_filterPanel = value;
				_filterPanel.addEventListener("FilterChanged", FilterChanged);
				FilterChanged();
			}

			public function get listData():BaseListData {
				return _listData;
			}

			public function set listData(value:BaseListData):void {
				_listData = value;
				if (_listData != null) {
					UpdateLabel(_listData.label);
				}
				else {
					lblHeader.text = "";
				}
			}

			override public function validateSize(recursive:Boolean=false):void {
				super.validateSize(recursive);
				if (lblHeader.measuredWidth + 24 > this.width && lblHeader.text != null && lblHeader.text.match(/^\s*$/) == null) {
					lblHeader.toolTip = lblHeader.text;
				}
				else {
					lblHeader.toolTip = null;
				}
			}

			private function UpdateLabel(t:String):void {
				if (lblHeader == null) {
					callLater(UpdateLabel, [t]);
					return;
				}
				lblHeader.text = t;
			}

			private function ShowReset():void {
				if (_resetShown || _justClicked || !btnFilter.selected || _filterPanel.Opened) {
					return;
				}
				_resetShown = true;

				var resetPanel:PopUpCanvas = new PopUpCanvas();
				resetPanel.height = 17;
				resetPanel.setStyle("backgroundColor", Colors.THEME_COLOR);
				resetPanel.setStyle("backgroundAlpha", 0.9);
				resetPanel.setStyle("borderStyle", "solid");
				resetPanel.setStyle("borderThickness", 0);
				resetPanel.setStyle("cornerRadius", 4);
				resetPanel.filters = [new BlurFilter(0, 0, 0)];

				var fadeIn:Fade = new Fade();
				fadeIn.alphaFrom = 0;
				fadeIn.alphaTo = 1;
				fadeIn.duration = 500;
				resetPanel.setStyle("showEffect", fadeIn);

				var fadeOut:Fade = new Fade();
				fadeOut.alphaFrom = 1;
				fadeOut.alphaTo = 0;
				fadeOut.duration = 500;
				fadeOut.addEventListener(EffectEvent.EFFECT_END, function(event:EffectEvent):void {
					resetPanel.Close();
				});

				var timer:Timer = new Timer(2000, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, function(event:TimerEvent):void {
					fadeOut.play([resetPanel]);
				});

				var overlayPanel:Canvas = new Canvas();
				overlayPanel.setStyle("backgroundColor", 0xffffff);
				overlayPanel.setStyle("backgroundAlpha", 0);
				overlayPanel.setStyle("borderStyle", "solid");
				overlayPanel.setStyle("borderThickness", 0);
				overlayPanel.setStyle("cornerRadius", 4);

				var resetLabel:Label = new Label();
				resetLabel.text = "重设";
				resetLabel.setStyle("verticalCenter", 0);
				resetLabel.setStyle("color", 0xffffff);
				resetLabel.setStyle("fontWeight", "bold");
				resetLabel.setStyle("paddingLeft", 5);
				resetLabel.setStyle("paddingRight", 5);
				overlayPanel.addChild(resetLabel);
				resetPanel.addChild(overlayPanel);

				resetPanel.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {
					_filterPanel.FilterValue = null;
					fadeOut.play([resetPanel]);
				});
				resetPanel.addEventListener(MouseEvent.MOUSE_OVER, function(event:MouseEvent):void {
					overlayPanel.setStyle("backgroundAlpha", 0.2);
					timer.stop();
				});
				resetPanel.addEventListener(MouseEvent.MOUSE_OUT, function(event:MouseEvent):void {
					overlayPanel.setStyle("backgroundAlpha", 0);
					timer.delay = 500;
					timer.start();
				});
				resetPanel.addEventListener(Event.REMOVED_FROM_STAGE, function(event:Event):void {
					_resetShown = false;
				});

				var rect:Rectangle = btnFilter.getBounds(Application.application as DisplayObject);
				resetPanel.Open(rect.right + 3, rect.top);
				timer.start();
			}

			private function DropDownButtonClicked(event:MouseEvent):void {
				if (_timer == null) {
					_timer = new Timer(1000, 1);
					_timer.addEventListener(TimerEvent.TIMER_COMPLETE, function(event:TimerEvent):void {
						_justClicked = false;
					});
				}
				_justClicked = true;
				_timer.start();

				var rect:Rectangle = btnFilter.getBounds(Application.application as DisplayObject);
				_filterPanel.Open(rect.left - 1, rect.bottom + 4);
			}

			private function FilterChanged(event:Event=null):void {
				if (btnFilter == null) {
					callLater(FilterChanged);
					return;
				}
				btnFilter.selected = _filterPanel.FilterEnabled;
			}

			private function InstallEventCanceller():void {
				btnFilter.addEventListener(MouseEvent.MOUSE_DOWN, CancelEvent);
				btnFilter.addEventListener(MouseEvent.MOUSE_UP, CancelEvent);
				btnFilter.addEventListener(MouseEvent.MOUSE_OVER, CancelEvent);
				btnFilter.addEventListener(MouseEvent.MOUSE_OUT, CancelEvent);
			}

			private function CancelEvent(event:Event):void {
				event.stopPropagation();
			}
		]]>
	</mx:Script>
	<mx:Button id="btnFilter" icon="{ICO_FILTER}" width="18" height="17" upSkin="mx.skins.ProgrammaticSkin" click="DropDownButtonClicked(event)" creationComplete="InstallEventCanceller()" mouseMove="ShowReset()"/>
	<mx:Label id="lblHeader" text=""/>
</mx:HBox>
